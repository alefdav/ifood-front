/**
 * Funções para download de relatórios
 */

/**
 * Baixa o relatório em PDF
 * @param reportId ID do relatório a ser baixado
 * @param paymentId ID do pagamento associado ao relatório
 * @returns Blob do arquivo PDF
 */
export async function downloadReportPDF(reportId: string, paymentId: string): Promise<Blob> {
  try {
    // Em um ambiente real, faríamos uma chamada para o serviço de PDF
    // Exemplo: const response = await fetch(`/api/reports/${reportId}/download?payment_id=${paymentId}`);
    
    console.log(`Solicitando download do relatório: ${reportId} com pagamento: ${paymentId}`);
    
    // Simular um atraso de rede
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Criar um PDF de exemplo (em um cenário real, isso viria da API)
    // Aqui estamos apenas simulando um PDF vazio
    const pdfContent = new Uint8Array([
      0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34, 0x0a, 0x25, 0xc7, 0xec,
      0x8f, 0xa2, 0x0a, 0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c,
      0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x43, 0x61, 0x74, 0x61, 0x6c,
      0x6f, 0x67, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30,
      0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a,
      0x32, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54,
      0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x43, 0x6f,
      0x75, 0x6e, 0x74, 0x20, 0x31, 0x2f, 0x4b, 0x69, 0x64, 0x73, 0x5b, 0x33,
      0x20, 0x30, 0x20, 0x52, 0x5d, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f,
      0x62, 0x6a, 0x0a, 0x33, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c,
      0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x2f,
      0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52,
      0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3c, 0x3c,
      0x2f, 0x46, 0x6f, 0x6e, 0x74, 0x3c, 0x3c, 0x2f, 0x46, 0x31, 0x20, 0x34,
      0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x3e, 0x3e, 0x2f, 0x43, 0x6f, 0x6e,
      0x74, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x35, 0x20, 0x30, 0x20, 0x52, 0x3e,
      0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x34, 0x20, 0x30,
      0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65,
      0x2f, 0x46, 0x6f, 0x6e, 0x74, 0x2f, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
      0x65, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x2f, 0x4e, 0x61, 0x6d, 0x65,
      0x2f, 0x46, 0x31, 0x2f, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x6e, 0x74,
      0x2f, 0x48, 0x65, 0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x3e, 0x3e,
      0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x35, 0x20, 0x30, 0x20,
      0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x4c, 0x65, 0x6e, 0x67, 0x74,
      0x68, 0x20, 0x34, 0x34, 0x3e, 0x3e, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
      0x6d, 0x0a, 0x42, 0x54, 0x0a, 0x2f, 0x46, 0x31, 0x20, 0x31, 0x32, 0x20,
      0x54, 0x66, 0x0a, 0x31, 0x30, 0x30, 0x20, 0x37, 0x30, 0x30, 0x20, 0x54,
      0x64, 0x0a, 0x28, 0x52, 0x65, 0x6c, 0x61, 0x74, 0xf3, 0x72, 0x69, 0x6f,
      0x20, 0x64, 0x6f, 0x20, 0x69, 0x46, 0x6f, 0x6f, 0x64, 0x20, 0x50, 0x65,
      0x72, 0x66, 0x65, 0x69, 0x74, 0x6f, 0x29, 0x20, 0x54, 0x6a, 0x0a, 0x45,
      0x54, 0x0a, 0x65, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x0a,
      0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x78, 0x72, 0x65, 0x66, 0x0a,
      0x30, 0x20, 0x36, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
      0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x20, 0x0a,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x20, 0x30,
      0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30,
      0x30, 0x30, 0x30, 0x30, 0x37, 0x39, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30,
      0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31,
      0x37, 0x33, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x31, 0x20, 0x30,
      0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30,
      0x30, 0x30, 0x30, 0x33, 0x38, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30,
      0x20, 0x6e, 0x20, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x0a,
      0x3c, 0x3c, 0x2f, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x36, 0x2f, 0x52, 0x6f,
      0x6f, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x73,
      0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x35, 0x32, 0x36,
      0x0a, 0x25, 0x25, 0x45, 0x4f, 0x46, 0x0a
    ]);
    
    return new Blob([pdfContent], { type: 'application/pdf' });
  } catch (error) {
    console.error('Erro ao baixar relatório:', error);
    throw new Error('Não foi possível baixar o relatório');
  }
}

/**
 * Inicia o download de um arquivo no navegador
 * @param blob Blob do arquivo
 * @param filename Nome do arquivo
 */
export function startDownload(blob: Blob, filename: string): void {
  // Criar URL para o blob
  const url = URL.createObjectURL(blob);
  
  // Criar elemento de link
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  
  // Adicionar ao documento e clicar
  document.body.appendChild(a);
  a.click();
  
  // Limpar
  setTimeout(() => {
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, 100);
} 